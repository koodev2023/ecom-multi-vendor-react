/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Address,
  Order,
  OrderItem,
  PaymentLinkResponseDto,
} from '../models/index';
import {
    AddressFromJSON,
    AddressToJSON,
    OrderFromJSON,
    OrderToJSON,
    OrderItemFromJSON,
    OrderItemToJSON,
    PaymentLinkResponseDtoFromJSON,
    PaymentLinkResponseDtoToJSON,
} from '../models/index';

export interface CancelOrderRequest {
    authorization: string;
    orderId: number;
}

export interface CreateOrderHandlerRequest {
    paymentMethod: CreateOrderHandlerPaymentMethodEnum;
    authorization: string;
    address: Address;
}

export interface GetOrderByIdRequest {
    authorization: string;
    orderId: number;
}

export interface GetOrderItemByIdRequest {
    orderItemId: number;
    authorization: string;
}

export interface UsersOrderHistoryHandlerRequest {
    authorization: string;
}

/**
 * 
 */
export class OrderControllerApi extends runtime.BaseAPI {

    /**
     */
    async cancelOrderRaw(requestParameters: CancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling cancelOrder().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling cancelOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/orders/{orderId}/cancel`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     */
    async cancelOrder(requestParameters: CancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.cancelOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createOrderHandlerRaw(requestParameters: CreateOrderHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentLinkResponseDto>> {
        if (requestParameters['paymentMethod'] == null) {
            throw new runtime.RequiredError(
                'paymentMethod',
                'Required parameter "paymentMethod" was null or undefined when calling createOrderHandler().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling createOrderHandler().'
            );
        }

        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling createOrderHandler().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['paymentMethod'] != null) {
            queryParameters['paymentMethod'] = requestParameters['paymentMethod'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/orders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressToJSON(requestParameters['address']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentLinkResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async createOrderHandler(requestParameters: CreateOrderHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentLinkResponseDto> {
        const response = await this.createOrderHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getOrderByIdRaw(requestParameters: GetOrderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getOrderById().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling getOrderById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/orders/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     */
    async getOrderById(requestParameters: GetOrderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.getOrderByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getOrderItemByIdRaw(requestParameters: GetOrderItemByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderItem>> {
        if (requestParameters['orderItemId'] == null) {
            throw new runtime.RequiredError(
                'orderItemId',
                'Required parameter "orderItemId" was null or undefined when calling getOrderItemById().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getOrderItemById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/orders/items/{orderItemId}`.replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters['orderItemId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderItemFromJSON(jsonValue));
    }

    /**
     */
    async getOrderItemById(requestParameters: GetOrderItemByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderItem> {
        const response = await this.getOrderItemByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersOrderHistoryHandlerRaw(requestParameters: UsersOrderHistoryHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Order>>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling usersOrderHistoryHandler().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/orders/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderFromJSON));
    }

    /**
     */
    async usersOrderHistoryHandler(requestParameters: UsersOrderHistoryHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Order>> {
        const response = await this.usersOrderHistoryHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CreateOrderHandlerPaymentMethodEnum = {
    Stripe: 'STRIPE'
} as const;
export type CreateOrderHandlerPaymentMethodEnum = typeof CreateOrderHandlerPaymentMethodEnum[keyof typeof CreateOrderHandlerPaymentMethodEnum];
