/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Deal,
  ModelApiResponse,
} from '../models/index';
import {
    DealFromJSON,
    DealToJSON,
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
} from '../models/index';

export interface CreateDealsRequest {
    deal: Deal;
}

export interface DeleteDealsRequest {
    id: number;
}

export interface UpdateDealsRequest {
    id: number;
    deal: Deal;
}

/**
 * 
 */
export class DealControllerApi extends runtime.BaseAPI {

    /**
     */
    async createDealsRaw(requestParameters: CreateDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Deal>> {
        if (requestParameters['deal'] == null) {
            throw new runtime.RequiredError(
                'deal',
                'Required parameter "deal" was null or undefined when calling createDeals().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/deals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DealToJSON(requestParameters['deal']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DealFromJSON(jsonValue));
    }

    /**
     */
    async createDeals(requestParameters: CreateDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Deal> {
        const response = await this.createDealsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteDealsRaw(requestParameters: DeleteDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteDeals().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/deals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteDeals(requestParameters: DeleteDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.deleteDealsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllDealsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Deal>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/deals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DealFromJSON));
    }

    /**
     */
    async getAllDeals(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Deal>> {
        const response = await this.getAllDealsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updateDealsRaw(requestParameters: UpdateDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Deal>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateDeals().'
            );
        }

        if (requestParameters['deal'] == null) {
            throw new runtime.RequiredError(
                'deal',
                'Required parameter "deal" was null or undefined when calling updateDeals().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/deals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DealToJSON(requestParameters['deal']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DealFromJSON(jsonValue));
    }

    /**
     */
    async updateDeals(requestParameters: UpdateDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Deal> {
        const response = await this.updateDealsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
