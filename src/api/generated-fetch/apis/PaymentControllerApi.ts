/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ModelApiResponse,
} from '../models/index';
import {
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
} from '../models/index';

export interface GetStripePaymentIdRequest {
    sessionId: string;
    authorization: string;
}

export interface PaymentSuccessHandlerRequest {
    paymentId: string;
    paymentLinkId: string;
    authorization: string;
}

/**
 * 
 */
export class PaymentControllerApi extends runtime.BaseAPI {

    /**
     */
    async getStripePaymentIdRaw(requestParameters: GetStripePaymentIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters['sessionId'] == null) {
            throw new runtime.RequiredError(
                'sessionId',
                'Required parameter "sessionId" was null or undefined when calling getStripePaymentId().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getStripePaymentId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/payments/stripePaymentId/{session_id}`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters['sessionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     */
    async getStripePaymentId(requestParameters: GetStripePaymentIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.getStripePaymentIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async paymentSuccessHandlerRaw(requestParameters: PaymentSuccessHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters['paymentId'] == null) {
            throw new runtime.RequiredError(
                'paymentId',
                'Required parameter "paymentId" was null or undefined when calling paymentSuccessHandler().'
            );
        }

        if (requestParameters['paymentLinkId'] == null) {
            throw new runtime.RequiredError(
                'paymentLinkId',
                'Required parameter "paymentLinkId" was null or undefined when calling paymentSuccessHandler().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling paymentSuccessHandler().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['paymentLinkId'] != null) {
            queryParameters['paymentLinkId'] = requestParameters['paymentLinkId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/payments/{paymentId}`.replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters['paymentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     */
    async paymentSuccessHandler(requestParameters: PaymentSuccessHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.paymentSuccessHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
