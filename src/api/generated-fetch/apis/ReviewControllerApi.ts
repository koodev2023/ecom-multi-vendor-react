/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateReviewRequest,
  ModelApiResponse,
  Review,
} from '../models/index';
import {
    CreateReviewRequestFromJSON,
    CreateReviewRequestToJSON,
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
    ReviewFromJSON,
    ReviewToJSON,
} from '../models/index';

export interface DeleteReviewRequest {
    authorization: string;
    reviewId: number;
}

export interface GetReviewsByProductIdRequest {
    productId: number;
}

export interface UpdateReviewRequest {
    authorization: string;
    reviewId: number;
    createReviewRequest: CreateReviewRequest;
}

export interface WriteReviewRequest {
    authorization: string;
    productId: number;
    createReviewRequest: CreateReviewRequest;
}

/**
 * 
 */
export class ReviewControllerApi extends runtime.BaseAPI {

    /**
     */
    async deleteReviewRaw(requestParameters: DeleteReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling deleteReview().'
            );
        }

        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling deleteReview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/reviews/{reviewId}`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteReview(requestParameters: DeleteReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.deleteReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getReviewsByProductIdRaw(requestParameters: GetReviewsByProductIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Review>>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling getReviewsByProductId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reviews/products/{productId}/reviews`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReviewFromJSON));
    }

    /**
     */
    async getReviewsByProductId(requestParameters: GetReviewsByProductIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Review>> {
        const response = await this.getReviewsByProductIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateReviewRaw(requestParameters: UpdateReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Review>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling updateReview().'
            );
        }

        if (requestParameters['reviewId'] == null) {
            throw new runtime.RequiredError(
                'reviewId',
                'Required parameter "reviewId" was null or undefined when calling updateReview().'
            );
        }

        if (requestParameters['createReviewRequest'] == null) {
            throw new runtime.RequiredError(
                'createReviewRequest',
                'Required parameter "createReviewRequest" was null or undefined when calling updateReview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/reviews/{reviewId}`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters['reviewId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CreateReviewRequestToJSON(requestParameters['createReviewRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewFromJSON(jsonValue));
    }

    /**
     */
    async updateReview(requestParameters: UpdateReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Review> {
        const response = await this.updateReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async writeReviewRaw(requestParameters: WriteReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Review>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling writeReview().'
            );
        }

        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling writeReview().'
            );
        }

        if (requestParameters['createReviewRequest'] == null) {
            throw new runtime.RequiredError(
                'createReviewRequest',
                'Required parameter "createReviewRequest" was null or undefined when calling writeReview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/reviews/products/{productId}/reviews`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters['productId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateReviewRequestToJSON(requestParameters['createReviewRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewFromJSON(jsonValue));
    }

    /**
     */
    async writeReview(requestParameters: WriteReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Review> {
        const response = await this.writeReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
