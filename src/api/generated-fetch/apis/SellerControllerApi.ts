/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthResponse,
  LoginDto,
  ModelApiResponse,
  Seller,
  SellerReport,
} from '../models/index';
import {
    AuthResponseFromJSON,
    AuthResponseToJSON,
    LoginDtoFromJSON,
    LoginDtoToJSON,
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
    SellerFromJSON,
    SellerToJSON,
    SellerReportFromJSON,
    SellerReportToJSON,
} from '../models/index';

export interface CreateSellerRequest {
    seller: Seller;
}

export interface DeleteSellerRequest {
    id: number;
}

export interface GetAllSellersRequest {
    status: GetAllSellersStatusEnum;
}

export interface GetSellerByIdRequest {
    id: number;
}

export interface GetSellerByJwtRequest {
    authorization: string;
}

export interface GetSellerReportRequest {
    authorization: string;
}

export interface LoginSellerRequest {
    loginDto: LoginDto;
}

export interface UpdateSellerRequest {
    authorization: string;
    seller: Seller;
}

export interface VerifySellerEmailRequest {
    token: string;
}

/**
 * 
 */
export class SellerControllerApi extends runtime.BaseAPI {

    /**
     */
    async createSellerRaw(requestParameters: CreateSellerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Seller>> {
        if (requestParameters['seller'] == null) {
            throw new runtime.RequiredError(
                'seller',
                'Required parameter "seller" was null or undefined when calling createSeller().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sellers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SellerToJSON(requestParameters['seller']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SellerFromJSON(jsonValue));
    }

    /**
     */
    async createSeller(requestParameters: CreateSellerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Seller> {
        const response = await this.createSellerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteSellerRaw(requestParameters: DeleteSellerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteSeller().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sellers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteSeller(requestParameters: DeleteSellerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSellerRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllSellersRaw(requestParameters: GetAllSellersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Seller>>> {
        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling getAllSellers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sellers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SellerFromJSON));
    }

    /**
     */
    async getAllSellers(requestParameters: GetAllSellersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Seller>> {
        const response = await this.getAllSellersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSellerByIdRaw(requestParameters: GetSellerByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Seller>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSellerById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sellers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SellerFromJSON(jsonValue));
    }

    /**
     */
    async getSellerById(requestParameters: GetSellerByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Seller> {
        const response = await this.getSellerByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSellerByJwtRaw(requestParameters: GetSellerByJwtRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Seller>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getSellerByJwt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/sellers/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SellerFromJSON(jsonValue));
    }

    /**
     */
    async getSellerByJwt(requestParameters: GetSellerByJwtRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Seller> {
        const response = await this.getSellerByJwtRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSellerReportRaw(requestParameters: GetSellerReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SellerReport>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getSellerReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/sellers/report`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SellerReportFromJSON(jsonValue));
    }

    /**
     */
    async getSellerReport(requestParameters: GetSellerReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SellerReport> {
        const response = await this.getSellerReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async loginSellerRaw(requestParameters: LoginSellerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters['loginDto'] == null) {
            throw new runtime.RequiredError(
                'loginDto',
                'Required parameter "loginDto" was null or undefined when calling loginSeller().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sellers/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDtoToJSON(requestParameters['loginDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     */
    async loginSeller(requestParameters: LoginSellerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.loginSellerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateSellerRaw(requestParameters: UpdateSellerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Seller>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling updateSeller().'
            );
        }

        if (requestParameters['seller'] == null) {
            throw new runtime.RequiredError(
                'seller',
                'Required parameter "seller" was null or undefined when calling updateSeller().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/sellers`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SellerToJSON(requestParameters['seller']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SellerFromJSON(jsonValue));
    }

    /**
     */
    async updateSeller(requestParameters: UpdateSellerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Seller> {
        const response = await this.updateSellerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async verifySellerEmailRaw(requestParameters: VerifySellerEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling verifySellerEmail().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sellers/verify-email`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     */
    async verifySellerEmail(requestParameters: VerifySellerEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.verifySellerEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAllSellersStatusEnum = {
    PendingVerification: 'PENDING_VERIFICATION',
    Active: 'ACTIVE',
    Suspended: 'SUSPENDED',
    Deactivated: 'DEACTIVATED',
    Banned: 'BANNED',
    Closed: 'CLOSED'
} as const;
export type GetAllSellersStatusEnum = typeof GetAllSellersStatusEnum[keyof typeof GetAllSellersStatusEnum];
