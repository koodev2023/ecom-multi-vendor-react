/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthResponse,
  LoginDto,
  ModelApiResponse,
  RegisterRequest,
  SendAuthOtpRequest,
} from '../models/index';
import {
    AuthResponseFromJSON,
    AuthResponseToJSON,
    LoginDtoFromJSON,
    LoginDtoToJSON,
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
    RegisterRequestFromJSON,
    RegisterRequestToJSON,
    SendAuthOtpRequestFromJSON,
    SendAuthOtpRequestToJSON,
} from '../models/index';

export interface CreateUserHandlerRequest {
    registerRequest: RegisterRequest;
}

export interface LoginHandlerRequest {
    loginDto: LoginDto;
}

export interface SendLoginOtpHandlerRequest {
    sendAuthOtpRequest: SendAuthOtpRequest;
}

export interface SendRegisterOtpHandlerRequest {
    sendAuthOtpRequest: SendAuthOtpRequest;
}

/**
 * 
 */
export class AuthControllerApi extends runtime.BaseAPI {

    /**
     */
    async createUserHandlerRaw(requestParameters: CreateUserHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters['registerRequest'] == null) {
            throw new runtime.RequiredError(
                'registerRequest',
                'Required parameter "registerRequest" was null or undefined when calling createUserHandler().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters['registerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     */
    async createUserHandler(requestParameters: CreateUserHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.createUserHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async loginHandlerRaw(requestParameters: LoginHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters['loginDto'] == null) {
            throw new runtime.RequiredError(
                'loginDto',
                'Required parameter "loginDto" was null or undefined when calling loginHandler().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDtoToJSON(requestParameters['loginDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     */
    async loginHandler(requestParameters: LoginHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.loginHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async sendLoginOtpHandlerRaw(requestParameters: SendLoginOtpHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters['sendAuthOtpRequest'] == null) {
            throw new runtime.RequiredError(
                'sendAuthOtpRequest',
                'Required parameter "sendAuthOtpRequest" was null or undefined when calling sendLoginOtpHandler().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/send-login-otp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendAuthOtpRequestToJSON(requestParameters['sendAuthOtpRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     */
    async sendLoginOtpHandler(requestParameters: SendLoginOtpHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.sendLoginOtpHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async sendRegisterOtpHandlerRaw(requestParameters: SendRegisterOtpHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters['sendAuthOtpRequest'] == null) {
            throw new runtime.RequiredError(
                'sendAuthOtpRequest',
                'Required parameter "sendAuthOtpRequest" was null or undefined when calling sendRegisterOtpHandler().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/send-register-otp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendAuthOtpRequestToJSON(requestParameters['sendAuthOtpRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     */
    async sendRegisterOtpHandler(requestParameters: SendRegisterOtpHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.sendRegisterOtpHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
