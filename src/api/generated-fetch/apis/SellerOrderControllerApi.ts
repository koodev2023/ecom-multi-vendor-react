/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ModelApiResponse,
  Order,
} from '../models/index';
import {
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
    OrderFromJSON,
    OrderToJSON,
} from '../models/index';

export interface DeleteOrderHandlerRequest {
    authorization: string;
    orderId: number;
}

export interface GetAllOrdersHandlerRequest {
    authorization: string;
}

export interface UpdateOrderHandlerRequest {
    authorization: string;
    orderId: number;
    orderStatus: UpdateOrderHandlerOrderStatusEnum;
}

/**
 * 
 */
export class SellerOrderControllerApi extends runtime.BaseAPI {

    /**
     */
    async deleteOrderHandlerRaw(requestParameters: DeleteOrderHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling deleteOrderHandler().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling deleteOrderHandler().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/seller/orders/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteOrderHandler(requestParameters: DeleteOrderHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelApiResponse> {
        const response = await this.deleteOrderHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllOrdersHandlerRaw(requestParameters: GetAllOrdersHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Order>>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getAllOrdersHandler().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/seller/orders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderFromJSON));
    }

    /**
     */
    async getAllOrdersHandler(requestParameters: GetAllOrdersHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Order>> {
        const response = await this.getAllOrdersHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateOrderHandlerRaw(requestParameters: UpdateOrderHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling updateOrderHandler().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling updateOrderHandler().'
            );
        }

        if (requestParameters['orderStatus'] == null) {
            throw new runtime.RequiredError(
                'orderStatus',
                'Required parameter "orderStatus" was null or undefined when calling updateOrderHandler().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/seller/orders/{orderId}/status/{orderStatus}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"orderStatus"}}`, encodeURIComponent(String(requestParameters['orderStatus']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     */
    async updateOrderHandler(requestParameters: UpdateOrderHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateOrderHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const UpdateOrderHandlerOrderStatusEnum = {
    Pending: 'PENDING',
    Placed: 'PLACED',
    Confirmed: 'CONFIRMED',
    Shipped: 'SHIPPED',
    Delivered: 'DELIVERED',
    Cancelled: 'CANCELLED'
} as const;
export type UpdateOrderHandlerOrderStatusEnum = typeof UpdateOrderHandlerOrderStatusEnum[keyof typeof UpdateOrderHandlerOrderStatusEnum];
