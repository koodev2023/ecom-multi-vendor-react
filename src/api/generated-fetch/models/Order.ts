/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
    AddressToJSONTyped,
} from './Address';
import type { OrderItem } from './OrderItem';
import {
    OrderItemFromJSON,
    OrderItemFromJSONTyped,
    OrderItemToJSON,
    OrderItemToJSONTyped,
} from './OrderItem';
import type { PaymentDetails } from './PaymentDetails';
import {
    PaymentDetailsFromJSON,
    PaymentDetailsFromJSONTyped,
    PaymentDetailsToJSON,
    PaymentDetailsToJSONTyped,
} from './PaymentDetails';

/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    orderId?: string;
    /**
     * 
     * @type {User}
     * @memberof Order
     */
    user?: User;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    sellerId?: number;
    /**
     * 
     * @type {Array<OrderItem>}
     * @memberof Order
     */
    orderItems?: Array<OrderItem>;
    /**
     * 
     * @type {Address}
     * @memberof Order
     */
    shippingAddress?: Address;
    /**
     * 
     * @type {PaymentDetails}
     * @memberof Order
     */
    paymentDetails?: PaymentDetails;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    totalMrpPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    totalSellingPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    discount?: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    orderStatus?: OrderOrderStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    totalItemCount?: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    paymentStatus?: OrderPaymentStatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof Order
     */
    orderDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Order
     */
    deliverDate?: Date;
}


/**
 * @export
 */
export const OrderOrderStatusEnum = {
    Pending: 'PENDING',
    Placed: 'PLACED',
    Confirmed: 'CONFIRMED',
    Shipped: 'SHIPPED',
    Delivered: 'DELIVERED',
    Cancelled: 'CANCELLED'
} as const;
export type OrderOrderStatusEnum = typeof OrderOrderStatusEnum[keyof typeof OrderOrderStatusEnum];

/**
 * @export
 */
export const OrderPaymentStatusEnum = {
    Pending: 'PENDING',
    Processing: 'PROCESSING',
    Completed: 'COMPLETED',
    Failed: 'FAILED'
} as const;
export type OrderPaymentStatusEnum = typeof OrderPaymentStatusEnum[keyof typeof OrderPaymentStatusEnum];


/**
 * Check if a given object implements the Order interface.
 */
export function instanceOfOrder(value: object): value is Order {
    return true;
}

export function OrderFromJSON(json: any): Order {
    return OrderFromJSONTyped(json, false);
}

export function OrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Order {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'orderId': json['orderId'] == null ? undefined : json['orderId'],
        'user': json['user'] == null ? undefined : UserFromJSON(json['user']),
        'sellerId': json['sellerId'] == null ? undefined : json['sellerId'],
        'orderItems': json['orderItems'] == null ? undefined : ((json['orderItems'] as Array<any>).map(OrderItemFromJSON)),
        'shippingAddress': json['shippingAddress'] == null ? undefined : AddressFromJSON(json['shippingAddress']),
        'paymentDetails': json['paymentDetails'] == null ? undefined : PaymentDetailsFromJSON(json['paymentDetails']),
        'totalMrpPrice': json['totalMrpPrice'] == null ? undefined : json['totalMrpPrice'],
        'totalSellingPrice': json['totalSellingPrice'] == null ? undefined : json['totalSellingPrice'],
        'discount': json['discount'] == null ? undefined : json['discount'],
        'orderStatus': json['orderStatus'] == null ? undefined : json['orderStatus'],
        'totalItemCount': json['totalItemCount'] == null ? undefined : json['totalItemCount'],
        'paymentStatus': json['paymentStatus'] == null ? undefined : json['paymentStatus'],
        'orderDate': json['orderDate'] == null ? undefined : (new Date(json['orderDate'])),
        'deliverDate': json['deliverDate'] == null ? undefined : (new Date(json['deliverDate'])),
    };
}

export function OrderToJSON(json: any): Order {
    return OrderToJSONTyped(json, false);
}

export function OrderToJSONTyped(value?: Order | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'orderId': value['orderId'],
        'user': UserToJSON(value['user']),
        'sellerId': value['sellerId'],
        'orderItems': value['orderItems'] == null ? undefined : ((value['orderItems'] as Array<any>).map(OrderItemToJSON)),
        'shippingAddress': AddressToJSON(value['shippingAddress']),
        'paymentDetails': PaymentDetailsToJSON(value['paymentDetails']),
        'totalMrpPrice': value['totalMrpPrice'],
        'totalSellingPrice': value['totalSellingPrice'],
        'discount': value['discount'],
        'orderStatus': value['orderStatus'],
        'totalItemCount': value['totalItemCount'],
        'paymentStatus': value['paymentStatus'],
        'orderDate': value['orderDate'] == null ? undefined : ((value['orderDate']).toISOString()),
        'deliverDate': value['deliverDate'] == null ? undefined : ((value['deliverDate']).toISOString()),
    };
}

