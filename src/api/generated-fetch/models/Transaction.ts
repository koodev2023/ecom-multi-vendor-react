/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Order } from './Order';
import {
    OrderFromJSON,
    OrderFromJSONTyped,
    OrderToJSON,
    OrderToJSONTyped,
} from './Order';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';
import type { Seller } from './Seller';
import {
    SellerFromJSON,
    SellerFromJSONTyped,
    SellerToJSON,
    SellerToJSONTyped,
} from './Seller';

/**
 * 
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    id?: number;
    /**
     * 
     * @type {User}
     * @memberof Transaction
     */
    customer?: User;
    /**
     * 
     * @type {Order}
     * @memberof Transaction
     */
    order?: Order;
    /**
     * 
     * @type {Seller}
     * @memberof Transaction
     */
    seller?: Seller;
    /**
     * 
     * @type {Date}
     * @memberof Transaction
     */
    date?: Date;
}

/**
 * Check if a given object implements the Transaction interface.
 */
export function instanceOfTransaction(value: object): value is Transaction {
    return true;
}

export function TransactionFromJSON(json: any): Transaction {
    return TransactionFromJSONTyped(json, false);
}

export function TransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Transaction {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'customer': json['customer'] == null ? undefined : UserFromJSON(json['customer']),
        'order': json['order'] == null ? undefined : OrderFromJSON(json['order']),
        'seller': json['seller'] == null ? undefined : SellerFromJSON(json['seller']),
        'date': json['date'] == null ? undefined : (new Date(json['date'])),
    };
}

export function TransactionToJSON(json: any): Transaction {
    return TransactionToJSONTyped(json, false);
}

export function TransactionToJSONTyped(value?: Transaction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'customer': UserToJSON(value['customer']),
        'order': OrderToJSON(value['order']),
        'seller': SellerToJSON(value['seller']),
        'date': value['date'] == null ? undefined : ((value['date']).toISOString()),
    };
}

